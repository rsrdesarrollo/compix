grammar grammar_ej14 {
	analysis LL1;
	nonterminal Sp, S, declaraciones, instrucciones, declaracion,
				declaraciones_r, instruccion, instrucciones_r, 
				E, E_r, E1, E1_r, E2, E2_r, E3, E4;
	terminal    IDEN, ENT, PAP, PCI, ASIGNACION, PUNTO_COMA, 
				EOF, DIV_SEC, NOT, OP0, OP1, OP2, OP3, tipo, booleano;

	S := declaraciones DIV_SEC instrucciones;
	
	// Quitar recursión izq (declaraciones := declaraciones PUNTO_COMA declaracion | declaracion)
	declaraciones := declaracion declaraciones_r;
	declaraciones_r := PUNTO_COMA declaracion declaraciones_r | ;
	
	// Quitar recursión izq (instrucciones := instrucciones PUNTO_COMA instruccion | instruccion)
	instrucciones := instruccion instrucciones_r;
	instrucciones_r := PUNTO_COMA instruccion instrucciones_r | ;
	
	declaracion := tipo IDEN;
	instruccion := IDEN ASIGNACION E;
	
	// COMPARACIÓN
	// Factorización E := E1 OP0 E1 | E1;
	E := E1 E_r;
	// Factorizar E
	E_r := OP0 E1 | ;
	
	// BOOLEANAS
	// Quitar recursión izq E1 ( E1 := E1 OP1 E2 | E2 ; )
	E1 := E2 E1_r;
	E1_r := OP1 E2 E1_r | ;
	
	// ARITMÉTICAS
	// Quitar recursión izq E2 ( E2 := E2 OP2 E3 | E3; )
	E2 := E3 E2_r;
	E2_r := OP2 E3 E2_r | ;
	
	// UNARIAS
	E3 := OP3 E4 | E4;
	
	E4 := IDEN | ENT | booleano | PAP E PCI;
	
	// OP0 := EQ | NEQ | LT | LET | GT | GET;
	// OP1 := AND | OR;
	// OP2 := ADD | SUB | MUL | DIV;
	// OP3 := ADD | SUB | NOT;
}
