package asint.cup;

import java_cup.runtime.*;
import asint.cup.alex.AnalizadorLexicoTiny;
import asint.cup.alex.UnidadLexica;
import asint.cup.errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal    IDEN, ENT, PAP, PCI, ASIGNACION, PUNTO_COMA, 
		DIV_SEC, NOT, EQ , NEQ , LT , LET ,
		GT , GET, AND , OR, ADD , SUB , MUL , DIV, INT, BOOL,
		FALSE, TRUE;

non terminal S, declaraciones, instrucciones, declaracion, instruccion, 
				E, E1, E2, E3, E4, tipo, booleano, OP0, OP1, OP2, OP3;

S ::= declaraciones DIV_SEC instrucciones;
	
declaraciones ::= declaraciones PUNTO_COMA declaracion | declaracion;
instrucciones ::= instrucciones PUNTO_COMA instruccion | instruccion;

declaracion ::= tipo IDEN;
instruccion ::= IDEN ASIGNACION E;

tipo ::= INT | BOOL;

E ::= E1 | E1 OP0 E1;
E1 ::= E1 OP1 E2 | E2;
E2 ::= E2 OP2 E3 | E3;
E3 ::= OP3 E4 | E4;
E4 ::= IDEN | ENT | booleano | PAP E PCI;

booleano ::= FALSE | TRUE;

OP0 ::= EQ | NEQ | LT | LET | GT | GET;
OP1 ::= AND | OR;
OP2 ::= ADD | SUB | MUL | DIV;
OP3 ::= ADD | SUB | NOT;
